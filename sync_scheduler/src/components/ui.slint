import { VerticalBox, HorizontalBox, GridBox, Button } from "std-widgets.slint";

struct SlintDay {
  id: string,
  day-number: int,
  is_current_date: bool,
  is_selected: bool
}

component DayCell inherits Rectangle {
  in property <int> day-number;
  in property <string> date-id;
  in property <bool> is_selected;

  property<bool> hover <=> ta.has-hover;

  callback select_date(string);

  background: #ffffff;
  border-width: 1px;
  border-color: #e0e0e0;
  padding: 0;

  VerticalBox {
    padding: 3px;
    Rectangle {
      padding: 0;
      background: root.hover ? #f1f2fd : #fff;
      animate background {
        duration: 200ms;
        easing: ease-in-out;
      }

      Rectangle {
        height: 35px;
        width: 35px;
        y: 0;
        x: parent.width - self.width;
        background: is_selected ? #5a60ee : transparent;
        animate background {
          duration: 200ms;
          easing: ease-in-out;
        }
        border-radius: 8px;
        Text {
            text: day-number > 0 ? day-number : "";
            horizontal-alignment: right;
            padding: 5px;
            color: is_selected ? #fff : #000;
            font-size: 14px;
            font-weight: is_selected ? 600 : 400;
        }
      }
    }
  }

  ta := TouchArea {
    mouse-cursor: pointer;
    clicked => {
        if (day-number > 0) {
            root.select_date(date-id);
        }
    }
  }

  states [
    hovered when root.hover : {
    }
  ]
}

component CalendarTemplate inherits Rectangle {
  in property <[string]> day-names: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
  in property <[[SlintDay]]> weeks;
  in property <string> date_title;
  
  callback next-month;
  callback previous-month;
  callback select_date(string);

  VerticalBox {
    spacing: 0;
    padding: 0;
    
    // Month header
    Rectangle {
      background: white;
      padding: 0;
      width: 100%; 
      height: 50px;

        HorizontalBox {
          spacing: 0;
          padding: 0;
          Button { 
              text: "◀"; 
              width: 50px;
              clicked => { root.previous-month(); }
          }
          Text { 
              text: root.date_title; 
              font-size: 24px; 
              horizontal-alignment: center; 
              vertical-alignment: center; 
              color: #5A60EE;
              font-weight: 600;
          }
          Button { 
              text: "▶"; 
              width: 50px;
              clicked => { root.next-month(); }
          }
        }
    }

    // Weekday headers
    HorizontalBox {
        height: 30px;
        width: 100%;
        spacing: 0;
        padding: 0;
        for day in day-names: Rectangle {
            background: #fff;
            Text {
                text: day;
                horizontal-alignment: center;
                vertical-alignment: center;
                color: #2E3445;
                font-weight: 800;
            }
        }
    }

    VerticalBox {
        width: 100%;
        spacing: 0;
        padding: 0;
        for week in weeks: HorizontalBox {
            spacing: 0;
            padding: 0;
            for day[i] in week: DayCell {
                width: 14.28%;
                day-number: day.day-number;
                is_selected: day.is_selected;
                select_date => { root.select_date(day.id); }
            }
        }
    }
}
}

component SelectedDateSidebar inherits Rectangle {
  in property <string> selected_date;

  width: 25%;
  height: 100%;
  background: #2E3445;

  HorizontalBox {
    Text {
      text: "Selected Date:";
      font-size: 20px;
      color: #D5E2FA;
    }
    Text {
      text: selected_date;
      font-size: 18px;
      color: #D5E2FA;
    }
  }
}

export component CalendarWindow inherits Window {
  preferred-width: 1200px;
  preferred-height: 1000px;
  full-screen: true;
  padding: 0;

  in property <[string]> day-names: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
  in property <[[SlintDay]]> weeks;
  in property <string> date_title;
  in property <string> selected_date;
  
  callback next-month;
  callback previous-month;
  callback select_date(string);

  HorizontalBox {
    width: 100%;
    height: 100%;
    padding: 0;
    spacing: 0;

    SelectedDateSidebar {
      selected_date: root.selected_date;
    }
  
    CalendarTemplate {
      width: 75%;
      height: 100%;
      day-names: root.day-names;
      weeks: root.weeks;
      date_title: root.date_title;
      background: #fff;
      next-month => { root.next-month(); }
      previous-month => { root.previous-month(); }
      select_date(date) => { root.select_date(date); }
    }
  }
}
