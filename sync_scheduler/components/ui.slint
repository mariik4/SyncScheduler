import { VerticalBox, HorizontalBox, GridBox, Button, Date, Time, ScrollView } from "std-widgets.slint";
import { ModalWindow } from "modal-window.slint";
import { CustomButton } from "custom-button.slint";

struct SlintEventPreview {
    id: string,
    name: string,
}

struct SlintDay {
  id: string,
  day-number: int,
  is_today: bool,
  is_selected: bool,
  events: [SlintEventPreview],
}

struct SlintEvent {
    id: string,
    name: string,
    description: string,
    event_type: string,
    start_time: Time,
    end_time: Time,
    priority: int,
    postpone: int,
}

component DayCell inherits Rectangle {
    in property <int> day-number;
    in property <string> date-id;
    in property <bool> is_selected;
    in property <bool> is_today;

    property <bool> hover <=> ta.has-hover;

    callback select_date(string);

    background: #ffffff;
    border-width: 1px;
    border-color: #e0e0e0;
    padding: 0;

    VerticalBox {
        padding: 3px;
        Rectangle {
            padding: 0;
            background: root.hover ? #f1f2fd : #fff;
            animate background {
                duration: 200ms;
                easing: ease-in-out;
            }

            Rectangle {
                height: 35px;
                width: 35px;
                y: 0;
                x: parent.width - self.width;
                background: is_selected ? #5a60ee : (is_today ? #b6b7e4 : transparent);
                animate background {
                    duration: 200ms;
                    easing: ease-in-out;
                }
                border-radius: 8px;
                Text {
                    text: day-number > 0 ? day-number : "";
                    horizontal-alignment: right;
                    padding: 5px;
                    color: is_selected ? #fff : #000;
                    font-size: 14px;
                    font-weight: is_selected ? 600 : 400;
                }
            }
        }
    }

    ta := TouchArea {
        mouse-cursor: pointer;
        clicked => {
            if (day-number > 0) {
                root.select_date(date-id);
            }
        }
    }

    states [
        hovered when root.hover: {}
    ]
}

component CalendarTemplate inherits Rectangle {
    in property <[string]> day-names: ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"];
    in property <[[SlintDay]]> weeks;
    in property <string> date_title;
    callback next-month;
    callback previous-month;
    callback select_date(string);

    height: 90%;
    padding: 0;

    VerticalBox {
        spacing: 0;
        padding: 0;
    // Month header
    Rectangle {
            background: white;
            padding: 0;
            width: 100%;
            height: 50px;

            HorizontalBox {
                spacing: 0;
                padding: 0;
                CustomButton {
                    text: "◀"; 
                    width: 50px;
                    height: 50px;
                    clicked => {
                        root.previous-month();
                    }
                }

                Text {
                    text: root.date_title;
                    font-size: 24px;
                    horizontal-alignment: center;
                    vertical-alignment: center;
                    color: #5A60EE;
                    font-weight: 600;
                }

                CustomButton {
                    text: "▶"; 
                    width: 50px;
                    height: 50px;
                    clicked => {
                        root.next-month();
                    }
                }
            }
        }

    // Weekday headers
    HorizontalBox {
            height: 30px;
            width: 100%;
            spacing: 0;
            padding: 0;
            for day in day-names: Rectangle {
                background: #fff;
                Text {
                    text: day;
                    horizontal-alignment: center;
                    vertical-alignment: center;
                    color: #2E3445;
                    font-weight: 800;
                }
            }
        }

        VerticalBox {
            width: 100%;
            spacing: 0;
            padding: 0;
            for week in weeks: HorizontalBox {
                spacing: 0;
                padding: 0;
                for day[i] in week: DayCell {
                    width: 14.28%;
                    day-number: day.day-number;
                    is_selected: day.is_selected;
                    is_today: day.is_today;
                    select_date => {
                        root.select_date(day.id);
                    }
                }
            }
        }
    }
}

component SelectedDateSidebar inherits Rectangle {
    in property <Date> selected_date;
    in property <[SlintEvent]> events;
    in property <bool> is_events_fetching_error;

    width: 25%;
    height: 100%;
    background: #2E3445;
    padding: 10px;
    padding-top: 20px;

    VerticalBox {
        height: 100%;
        spacing: 20px;
        padding: 5px;
        HorizontalBox {
            height: 8%;
            spacing: 0;
            padding: 10px;
            alignment: center;
            VerticalBox {
                width: 100%;
                height: 100%;
                padding: 0;
                spacing: 0;
                alignment: center;

                HorizontalBox {
                    width: 100%;
                    height: 100%;
                    padding: 0;
                    spacing: 0;
                    alignment: center;
                    Text {
                        text: selected_date.day + "." + selected_date.month + "." + selected_date.year;
                        font-size: 24px;
                        font-weight: 600;
                        color: #D5E2FA;
                    }
                }
            }
        }

        VerticalBox {
            width: 100%;
            height: 75%;
            padding: 0;
            spacing: 10px;

            Text {
                text: "You plans for today:";
                font-size: 20px;
                color: #D5E2FA;
            }

            Rectangle {
                padding: 0;
                width: 100%;
                height: 100%;
                border-color: #D5E2FA;
                border-width: 1px;
                border-radius: 5px;
                ScrollView {
                    width: 100%;
                    height: 100%;
                    padding: 0;

                    VerticalBox {
                        spacing: 10px;
                        padding: 5px;
                        if is_events_fetching_error: Text {
                            text: "Failed to fetch the events";
                            color: #FF0000;
                            font-size: 18px;
                        }
                        if events.length == 0: Text {
                            text: "It seems you have no plans for today ...";
                            color: #D5E2FA;
                            font-size: 18px;
                        }
                        for event in events: Rectangle {
                            width: 100%;
                            height: 100px;
                            background: #fff;
                            padding: 9px;
                            border-radius: 10px;
                            VerticalBox {
                                width: 100%;
                                padding: 5px;
                                spacing: 15px;
                                Text {
                                    padding: 0;
                                    text: event.name;
                                    font-size: 16px;
                                    color: #2E3445;
                                    font-weight: 600;
                                    wrap: word-wrap;
                                }

                                Text {
                                    padding: 0;
                                    text: event.description == "" ? "-" : event.description;
                                    font-size: 12px;
                                    color: #2E3445;
                                    wrap: word-wrap;
                                }

                                HorizontalBox {
                                    width: 100%;
                                    height: 20px;
                                    padding: 0;
                                    spacing: 0;
                                    Text {
                                        padding: 0;
                                        text: (event.start_time.hour < 10 ? "0" + event.start_time.hour : event.start_time.hour) + ":" + (event.start_time.minute < 10 ? "0" + event.start_time.minute : event.start_time.minute) + " - " + (event.end_time.hour < 10 ? "0" + event.end_time.hour : event.end_time.hour) + ":" + (event.end_time.minute < 10 ? "0" + event.end_time.minute : event.end_time.minute);
                                        font-size: 14px;
                                        color: #2e34459b;
                                        font-weight: 600;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        HorizontalBox {
            height: 10%;
            spacing: 0;
            padding: 0;
            Rectangle {
                Text {
                    text: "Events";
                    font-size: 14px;
                    color: #D5E2FA;
                    font-weight: 600;
                }
            }
        }
    }
}

component ActionsMenu inherits Rectangle {
    in property <Date> selected_date;
    callback collect-static-event-data(name: string, description: string, start_date: Date, end_date: Date, start_time: Time, end_time: Time);
    background: #fff;
    padding: 0;

    popup := PopupWindow {
        close-policy: close-on-click-outside;

        ModalWindow {
            selected_date: root.selected_date;
            request-close => {
                popup.close();
            }
            collect-static-event-data(name, description, start_date, end_date, start_time, end_time) => {
                root.collect-static-event-data(name, description, start_date, end_date, start_time, end_time);
            }
            padding: 0;
        }

        x: 200px;
        y: 180px;
        height: 600px;
        width: 700px;
    }

    HorizontalBox {
        spacing: 0;
        padding: 5px;

        CustomButton {
            width: 80px;
            height: 40px;

            Text {
                text: "New Event";
                font-size: 14px;
                color: #fff;
            }

            clicked => {
                popup.show();
            }
        }
    }
}

export component CalendarWindow inherits Window {
    preferred-width: 1200px;
    preferred-height: 1000px;
    full-screen: true;
    padding: 0;
    padding-left: 2px;
    background: #dddee2;

    in property <[string]> day-names: ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"];
    in property <[[SlintDay]]> weeks;
    in property <string> date_title;
    in property <Date> selected_date;
    in property <[SlintEvent]> events;
    in property <bool> is_events_fetching_error;
    callback next-month;
    callback previous-month;
    callback select_date(string);
    callback collect_static(name: string, description: string, start_date: Date, end_date: Date, start_time: Time, end_time: Time);

    HorizontalBox {
        width: 100%;
        height: 100%;
        padding: 0;
        spacing: 3px;

        SelectedDateSidebar {
            selected_date: root.selected_date;
            events: root.events;
            is_events_fetching_error: root.is_events_fetching_error;
        }

        VerticalBox {
            spacing: 3px;
            padding: 0;
            height: 100%;
            width: 75%;

            ActionsMenu {
                selected_date: root.selected_date;
                height: 60px;
                padding: 0;
                collect-static-event-data(name, description, start_date, end_date, start_time, end_time) => {
                    root.collect_static(name, description, start_date, end_date, start_time, end_time);
                }
            }

            CalendarTemplate {
                height: parent.height - 60px;
                day-names: root.day-names;
                weeks: root.weeks;
                date_title: root.date_title;
                background: #fff;
                next-month => {
                    root.next-month();
                }
                previous-month => {
                    root.previous-month();
                }
                select_date(date) => {
                    root.select_date(date);
                }
            }
        }
    }
}
