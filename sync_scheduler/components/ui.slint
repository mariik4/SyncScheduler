import { VerticalBox, HorizontalBox, GridBox, Button, Date, Time, ScrollView } from "std-widgets.slint";
import { ModalWindow } from "modal-window.slint";
import { LoginWindow } from "login-window.slint";
import { CustomButton } from "custom-button.slint";
import { SelectedDateSidebar, SlintEvent } from "selected-date-sidebar.slint";
import { SlintSlot, SuggestDynamicList } from "events/suggest-dynamics-list.slint";

struct SlintEventPreview {
    id: string,
    name: string,
}

struct SlintDay {
  id: string,
  day-number: int,
  is_today: bool,
  is_selected: bool,
  events: [SlintEventPreview],
}

component DayCell inherits Rectangle {
    in property <int> day-number;
    in property <string> date-id;
    in property <bool> is_selected;
    in property <bool> is_today;

    property <bool> hover <=> ta.has-hover;

    callback select_date(string);

    background: #ffffff;
    border-width: 1px;
    border-color: #e0e0e0;
    padding: 0;

    VerticalBox {
        padding: 3px;
        Rectangle {
            padding: 0;
            background: root.hover ? #f1f2fd : #fff;
            animate background {
                duration: 200ms;
                easing: ease-in-out;
            }

            Rectangle {
                height: 35px;
                width: 35px;
                y: 0;
                x: parent.width - self.width;
                background: is_selected ? #5a60ee : (is_today ? #b6b7e4 : transparent);
                animate background {
                    duration: 200ms;
                    easing: ease-in-out;
                }
                border-radius: 8px;
                Text {
                    text: day-number > 0 ? day-number : "";
                    horizontal-alignment: right;
                    padding: 5px;
                    color: is_selected ? #fff : #000;
                    font-size: 14px;
                    font-weight: is_selected ? 600 : 400;
                }
            }
        }
    }

    ta := TouchArea {
        mouse-cursor: pointer;
        clicked => {
            if (day-number > 0) {
                root.select_date(date-id);
            }
        }
    }

    states [
        hovered when root.hover: {}
    ]
}

component CalendarTemplate inherits Rectangle {
    in property <[string]> day-names: ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"];
    in property <[[SlintDay]]> weeks;
    in property <string> date_title;
    callback next-month;
    callback previous-month;
    callback select_date(string);

    height: 90%;
    padding: 0;

    VerticalBox {
        spacing: 5px;
        padding: 0;
        // Month header
        Rectangle {
            padding: 0;
            width: 100%;
            height: 40px;

            HorizontalBox {
                spacing: 0;
                padding: 0;
                CustomButton {
                    text: "◀"; 
                    width: 40px;
                    height: 40px;
                    clicked => {
                        root.previous-month();
                    }
                }

                Text {
                    text: root.date_title;
                    font-size: 26px;
                    horizontal-alignment: center;
                    vertical-alignment: center;
                    color: #2E3445;
                    font-weight: 600;
                }

                CustomButton {
                    text: "▶"; 
                    width: 40px;
                    height: 40px;
                    clicked => {
                        root.next-month();
                    }
                }
            }
        }

        // Weekday headers
        HorizontalBox {
            height: 30px;
            width: 100%;
            spacing: 0;
            padding: 0;
            for day in day-names: Rectangle {
                Text {
                    text: day;
                    horizontal-alignment: center;
                    vertical-alignment: center;
                    color: #2E3445;
                    font-weight: 800;
                }
            }
        }

        Rectangle {
            width: 100%;
            padding: 5px;
            background: #fff;
            border-radius: 20px;
            VerticalBox {
                width: 100%;
                spacing: 0;
                padding: 0;
                for week in weeks: HorizontalBox {
                    spacing: 0;
                    padding: 0;
                    for day[i] in week: DayCell {
                        width: 14.28%;
                        day-number: day.day-number;
                        is_selected: day.is_selected;
                        is_today: day.is_today;
                        select_date => {
                            root.select_date(day.id);
                        }
                    }
                }
            }
        }
    }
}

component ActionsMenu inherits Rectangle {
    in property <bool> is_loading: false;
    in property <string> error: "";
    in property <[SlintSlot]> slots;
    in property <Date> selected_date;

    callback collect-static-event-data(name: string, description: string, start_date: Date, end_date: Date, start_time: Time, end_time: Time);
    callback start_slots_searching(name: string, description: string, duration: Time, priority: int, weekdays: [int]);
    callback create-dynamic-event(slot_id: string);

    callback create_user(login: string, password: string);
    callback check_user(login: string, password: string);

    callback close_login();
    padding: 0;
    height: 35px;
    width: 100%;

    loginpage := PopupWindow {
        close-policy: no-auto-close;

        LoginWindow {
            check_user(login,password) => {
                root.check_user(login,password);
            }
            create_user(login,password) => {
                root.create_user(login,password);
            }

            close_login => {
                loginpage.close();
            }
        }

        x: 200px;
        y: 130px;
        height: 700px;
        width: 700px;
        padding: 0px;
    }

    popup := PopupWindow {
        close-policy: close-on-click-outside;

        ModalWindow {
            slots: root.slots;
            error: root.error;
            is_loading: root.is_loading;
            selected_date: root.selected_date;
            request-close => {
                popup.close();
            }
            start_slots_searching(name, description, duration, priority, weekdays) => {
                root.start_slots_searching(name, description, duration, priority, weekdays);
            }
            collect-static-event-data(name, description, start_date, end_date, start_time, end_time) => {
                root.collect-static-event-data(name, description, start_date, end_date, start_time, end_time);
            }
            create-dynamic-event(slot-id) => {
                root.create-dynamic-event(slot-id)
            }
            padding: 0;
        }

        x: 200px;
        y: 130px;
        height: 700px;
        width: 700px;
        padding: 0px;
    }

    HorizontalBox {
        spacing: 0;
        padding: 0;
        height: 40px;
        width: 100%;

        VerticalBox {
            width: 100px;
            height: 40px;
            padding: 0;
            spacing: 0;
            alignment: center;

            CustomButton {
                width: 100%;
                height: 30px;

                Text {
                    text: "New Event";
                    font-size: 14px;
                    color: #fff;
                }

                clicked => {
                    popup.show();
                }
            }
        }
    }

    init => {
        loginpage.show();
    }
}

export component CalendarWindow inherits Window {
    preferred-width: 1200px;
    preferred-height: 1000px;
    full-screen: true;
    padding: 0;
    padding-left: 2px;
    background: #dddee2;

    in property <[string]> day-names: ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"];
    in property <[[SlintDay]]> weeks;
    in property <string> date_title;

    in property <Date> selected_date;

    in property <bool> is_slots_loading: false;
    in property <string> slots_error: "";
    in property <[SlintSlot]> slots;

    in property <[SlintEvent]> events;
    in property <bool> is_events_fetching_error;
    callback next-month;
    callback previous-month;
    callback select_date(string);
    callback collect_static(name: string, description: string, start_date: Date, end_date: Date, start_time: Time, end_time: Time);
    callback start_slots_searching(name: string, description: string, duration: Time, priority: int, weekdays: [int]);
    callback create-dynamic-event(slot_id: string);

    callback create_user(login: string, password: string);
    callback check_user(login: string, password: string);

    callback close_login();
    HorizontalBox {
        width: 100%;
        height: 100%;
        padding: 0;
        spacing: 0;

        SelectedDateSidebar {
            selected_date: root.selected_date;
            events: root.events;
            is_events_fetching_error: root.is_events_fetching_error;
        }

        Rectangle {
            width: 75%;
            height: 100%;
            padding: 0;
            background: #eaeded;

            VerticalBox {
                spacing: 5px;
                padding: 0;
                padding-left: 25px;
                padding-right: 25px;
                height: 100%;
                width: 100%;

                ActionsMenu {
                    slots: root.slots;
                    error: root.slots_error;
                    is_loading: root.is_slots_loading;
                    selected_date: root.selected_date;
                    collect-static-event-data(name, description, start_date, end_date, start_time, end_time) => {
                        root.collect_static(name, description, start_date, end_date, start_time, end_time);
                    }
                    start_slots_searching(name, description, duration, priority, weekdays) => {
                        root.start_slots_searching(name, description, duration, priority, weekdays);
                    }
                    create-dynamic-event(slot-id) => {
                        root.create-dynamic-event(slot-id)
                    }
                    check_user(login,password) => {
                        root.check_user(login,password);
                    }
                    create_user(login,password) => {
                        root.create_user(login,password);
                    }
                    close_login() => {
                        root.close_login();
                    }
                }

                CalendarTemplate {
                    height: parent.height - 60px;
                    day-names: root.day-names;
                    weeks: root.weeks;
                    date_title: root.date_title;
                    next-month => {
                        root.next-month();
                    }
                    previous-month => {
                        root.previous-month();
                    }
                    select_date(date) => {
                        root.select_date(date);
                    }
                }
            }
        }
    }
}
